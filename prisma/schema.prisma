generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Phones {
  id        Int    @id
  category  String
  phoneId   String @unique
  itemId    String
  name      String
  fullPrice Int
  price     Int
  screen    String
  capacity  String
  color     String
  ram       String
  year      Int
  image     String
  cartItems CartItem[]
  favorites Favorites[]
}

model PhoneDetails {
  id                    String    @unique
  namespaceId           String  
  name                  String
  capacityAvailable     String[] 
  capacity              String
  priceRegular          Int
  priceDiscount         Int
  colorsAvailable       String[]
  color                 String
  images                String[]
  description           Json[] 
  screen                String
  resolution            String
  processor             String
  ram                   String
  camera                String
  zoom                  String
  cell                  String[]
}


model Cart {
  id         Int @id @default(autoincrement())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])
  cartItems   CartItem[]
}

model CartItem {
  id       Int @id @default(autoincrement())
  cartId   Int
  cart     Cart  @relation(fields: [cartId], references: [id])
  itemId   String
  item     Phones @relation(fields: [itemId], references: [phoneId])
  quantity Int?
}

model Favorites {
  id                 Int        @id @default(autoincrement())
  userId             String        @unique
  items              Phones[]
  user               User       @relation(fields: [userId], references: [id])
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  refresh_token_expires_in  Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  cart          Cart?   
  favoritesId   Int?        @unique
  favorites     Favorites?  
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

